/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.strath.view;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ParseException;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.ConstructorDeclaration;
import com.github.javaparser.ast.body.FieldDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.expr.MethodCallExpr;
import com.github.javaparser.ast.expr.ObjectCreationExpr;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.type.ClassOrInterfaceType;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import static java.lang.System.in;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.JFileChooser;
import static org.apache.commons.io.FileUtils.listFiles;

/**
 *
 * @author npb11143
 */
public class MainGUI extends javax.swing.JFrame {

    private boolean isProjectSet = false;

    private Collection<File> selectedProject;

    private static ArrayList<Clazz> classList;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        classList = new ArrayList<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        projectSelect = new javax.swing.JButton();
        genClassDiagram = new javax.swing.JButton();
        interactGen = new javax.swing.JButton();
        metrics = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        projectSelect.setText("Select Project");
        projectSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                projectSelectMouseReleased(evt);
            }
        });

        genClassDiagram.setText("Generate Class Diagram");
        genClassDiagram.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                genClassDiagramMouseReleased(evt);
            }
        });

        interactGen.setText("Generate Interaction Diagram");
        interactGen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                interactGenMouseReleased(evt);
            }
        });
        interactGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interactGenActionPerformed(evt);
            }
        });

        metrics.setText("View Metrics");
        metrics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                metricsMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(metrics, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(interactGen)
                    .addComponent(genClassDiagram, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projectSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(projectSelect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genClassDiagram)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(interactGen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metrics)
                .addContainerGap(171, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void genClassDiagramMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_genClassDiagramMouseReleased
        // TODO add your handling code here:
        if (selectedProject != null) {
            for (Clazz clazz : classList) {
                try {
                    String fullFile = "";
                    String className = "---------------------------------\n"
                            + "| " + clazz.getName() + "\n";
                    if (clazz.getImplementsString() != null) {
                        className = className + "| " + clazz.getImplementsString() + "\n";
                    }
                    if (clazz.getExtendsString() != null) {
                        className = className + "| " + clazz.getExtendsString() + "\n";
                    }
                    className = className + "|--------------------------------";

                    String fieldList = "";
                    String methodList = "";
                    if (clazz.getFields() != null) {
                        for (Feeld field : clazz.getFields()) {
                            fieldList = fieldList + "\n| -" + field.getName()
                                    + " : " + field.getType();
                        }
                    }
                    if (clazz.getMethods() != null) {
                        for (Methud method : clazz.getMethods()) {
                            methodList = methodList + "\n| +" + method.getName();
                        }
                    }
                    fullFile = fullFile + className + fieldList
                            + "\n|---------------------------------" + methodList
                            + "\n------------------------------\n\n";
                    
                    File file = new File("classdiagram.txt");
                    if (!file.exists()) {
                        file.createNewFile();
                    }
                    FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
                    try (BufferedWriter bw = new BufferedWriter(fw)) {
                        bw.write(fullFile);
                    }
                } catch (IOException e) {
                }
            }
        }
    }//GEN-LAST:event_genClassDiagramMouseReleased

    private void projectSelectMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_projectSelectMouseReleased
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnValue = chooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File directory = chooser.getSelectedFile();
            String[] extensions = new String[1];
            extensions[0] = "java";
            selectedProject = listFiles(directory, extensions, true);
            isProjectSet = true;
        }
        if (selectedProject != null) {
            selectedProject.stream().forEach((File file) -> {
                try {
                    FileInputStream in = new FileInputStream(file);
                    CompilationUnit cu;
                    cu = JavaParser.parse(in);
                    new AnalyserVisitor().visit(cu, null);
                } catch (FileNotFoundException | ParseException e) {
                } finally {
                    try {
                        in.close();
                    } catch (IOException e) {
                    }
                }
            });
            clearFiles();
        }
    }//GEN-LAST:event_projectSelectMouseReleased

    private void clearFiles() {
        File classDiagram = new File("classdiagram.txt");
        if (classDiagram.exists()) {
            try {
                new PrintWriter("classdiagram.txt").close();
            } catch (Exception e) {
            }
        }
        File metrics = new File("metrics.txt");
        if (metrics.exists()) {
            try {
                new PrintWriter("metrics.txt").close();
            } catch (Exception e) {
            }
        }
    }
    
    private void calculateNoc() {
        ArrayList<String> allExtends = new ArrayList<>();
        for(Clazz clazz : classList) {
            if(clazz.getExtendsNames() != null) {
                allExtends.addAll(clazz.getExtendsNames());
            }
        }
        for(Clazz clazz : classList) {
            int noc = 0;
            for(String extendName : allExtends) {
                if(extendName.equals(clazz.getName())) {
                    noc++;
                }
            }
            clazz.setNoc(noc);
        }
    }
    
    private void calculateDit() {
        for(Clazz clazz : classList) {
            int depth = 1;
            clazz.setDit(searchExtends(clazz, depth));
        }
    }

    private int searchExtends(Clazz clazz, int depth) {
        if (clazz.getExtendsNames() != null && !(clazz.getExtendsNames().isEmpty())) {
            depth++;
            for (String extendName : clazz.getExtendsNames()) {
                for (Clazz innerClazz : classList) {
                    if (extendName.equals(innerClazz.getName())) {
                        depth = searchExtends(innerClazz, depth);
                    }
                }
            }
            return depth;
        }
        return depth;
    }
    
    private void interactGenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interactGenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_interactGenActionPerformed

    private void interactGenMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_interactGenMouseReleased

    }//GEN-LAST:event_interactGenMouseReleased

    private void metricsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_metricsMouseReleased
        if (selectedProject != null) {
            calculateNoc();
            calculateDit();
            for (Clazz clazz : classList) {
                try {
                    String fullFile = "";
                    String className = "Class Name: " + clazz.getName();
                    String wmc = "\n WMC: " + clazz.getWmc();
                    String noc = "\n NOC: " + clazz.getNoc();
                    String dit = "\n DIT: " + clazz.getDit() + "\n";
                    
                    fullFile = className + wmc + noc + dit;
                    
                    File file = new File("metrics.txt");
                    if (!file.exists()) {
                        file.createNewFile();
                    }
                    
                    FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
                    try (BufferedWriter bw = new BufferedWriter(fw)) {
                        bw.write(fullFile);
                    }
                } catch (IOException e) {
                }
            }
        }
    }//GEN-LAST:event_metricsMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton genClassDiagram;
    private javax.swing.JButton interactGen;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton metrics;
    private javax.swing.JButton projectSelect;
    // End of variables declaration//GEN-END:variables

private static class AnalyserVisitor extends VoidVisitorAdapter {

    private Clazz clazz;
    
    @Override
    public void visit(ClassOrInterfaceDeclaration n, Object arg) {
        clazz = new Clazz(n.getName());
        clazz.setWmc(0);
        if (n.getImplements() != null) {
            String implementsString = "Implements: ";
            for (ClassOrInterfaceType coi : n.getImplements()) {
                implementsString = implementsString + coi.getName() + ", ";
                ArrayList<String> implementsNames;
                if(clazz.getImplementsNames() != null) {
                    implementsNames = clazz.getImplementsNames();
                } else {
                    implementsNames = new ArrayList<>();
                }
                implementsNames.add(coi.getName());
                clazz.setImplementsNames(implementsNames);
            }
            clazz.setImplementsString(implementsString.substring(0, implementsString.length() - 2));
        }
        if (n.getExtends() != null) {
            String extendsString = "Extends: ";
            for (ClassOrInterfaceType coi : n.getExtends()) {
                extendsString = extendsString + coi.getName() + ", ";
                ArrayList<String> extendsNames;
                if(clazz.getExtendsNames() != null) {
                    extendsNames = clazz.getExtendsNames();
                } else {
                    extendsNames = new ArrayList<>();
                }
                extendsNames.add(coi.getName());
                clazz.setExtendsNames(extendsNames);
            }
            clazz.setExtendsString(extendsString.substring(0, extendsString.length() - 2));
        }
        classList.add(clazz);
        super.visit(n, arg);
    }

    @Override
    public void visit(FieldDeclaration n, Object arg) {
        ArrayList<Feeld> tempArray;
        if (clazz.getFields() != null) {
            tempArray = clazz.getFields();
        } else {
            tempArray = new ArrayList<>();
        }
        n.getVariables().stream().map((var) -> new Feeld(var.getId().getName())).map((feeld) -> {
            feeld.setType(n.getType());
            return feeld;
        }).forEach((feeld) -> {
            tempArray.add(feeld);
        });
        clazz.setFields(tempArray);
    }

    @Override
    public void visit(MethodDeclaration n, Object arg) {
        Methud methud = new Methud(n.getName());
        ArrayList<Methud> tempArray;
        if (clazz.getMethods() != null) {
            tempArray = clazz.getMethods();
        } else {
            tempArray = new ArrayList<>();
        }
        tempArray.add(methud);
        clazz.setMethods(tempArray);
        clazz.setWmc(clazz.getWmc() + 1);
    }
    
    @Override
    public void visit(ConstructorDeclaration n, Object arg) {
        clazz.setWmc(clazz.getWmc() + 1);
    }
}

private static class InteractionDiagramVisitor extends VoidVisitorAdapter {

    @Override
    public void visit(ClassOrInterfaceDeclaration n, Object arg) {
        System.out.println("Class Name: " + n.getName());
        super.visit(n, arg);
    }

    @Override
    public void visit(MethodDeclaration n, Object arg) {
        System.out.println("Method name: " + n.getName());
        n.getBody().accept(this, arg); // process the body to pick up object creation
    }

    public void visit(ObjectCreationExpr p, Object arg) {
        System.out.println("New class instance");
        System.out.println("Type: " + p.getType());
    }

    @Override
    public void visit(MethodCallExpr n, Object arg) {
        System.out.println("Method Call Expression: " + n.getName());
        System.out.println("Method Call Expression Args: " + n.getArgs());
        System.out.println("Method Call Expression Child Nodes: " + n.getChildrenNodes());
        System.out.println("Method Call Expression Name Expr: " + n.getNameExpr());
        System.out.println("Method Call Expression Parent Node: " + n.getParentNode());
        System.out.println("Method Call Expression Scope: " + n.getScope());
        System.out.println("Method Call Expression Type Args: " + n.getTypeArgs());
        System.out.println("Method Call Expression Data: " + n.getData());
    }
}
}
